const express = require('express');
const session = require('express-session');
const bcrypt = require('bcrypt');
const mysql = require('mysql2');
const app = express();
const path = require('path');
const bodyParser = require('body-parser');


function requireRole(...roles) {
  return (req, res, next) => {
      if (req.session.user && roles.includes(req.session.user.tipo_usuario)) {
          next();
      } else {
          res.status(403).send('Acceso denegado');
      }
  };
}


// Middleware para verificar el inicio de sesión
function requireLogin(req, res, next) {
  if (!req.session.user) {
      return res.redirect('/login.html');
  }
  next();
}


// Configuración de la sesión
app.use(session({
  secret: 'secretKey',
  resave: false,
  saveUninitialized: false,
}));
app.use(express.urlencoded({ extended: true }));


// Ruta protegida (Página principal después de iniciar sesión)
app.get('/', requireLogin, (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});




// Servir archivos estáticos (HTML)
app.use(express.static(path.join(__dirname, 'public')));


// Ruta para la página principal
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});


// Configurar conexión a MySQL
const connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'C@st131979', // Cambia por tu contraseña
    database: 'hackaton_db'
  });
 
  connection.connect(err => {
    if (err) {
      console.error('Error conectando a MySQL:', err);
      return;
    }
    console.log('Conexión exitosa a MySQL');
  });
 
//registro
  app.post('/registrar', async (req, res) => {
    const { username, correo, password, codigo_acceso  } = req.body;


    const query = 'SELECT tipo_usuario FROM codigos_acceso WHERE codigo = ?';
    connection.query(query, [codigo_acceso], (err, results) => {
        if (err || results.length === 0) {
            return res.send('Código de acceso inválido');
        }


        const tipo_usuario = results[0].tipo_usuario;
        const hashedPassword = bcrypt.hashSync(password, 10);


        const insertUser = 'INSERT INTO usuarios (nombre, correo, contrasena_hash, tipo_usuario) VALUES (?, ?, ?, ?)';
        connection.query(insertUser, [username, correo, hashedPassword, tipo_usuario], (err) => {
            if (err) return res.send('Error al registrar usuario');
            res.redirect('/login.html');
        });
    });
});


// Iniciar sesión
app.post('/login', (req, res) => {
  const { nombre, password } = req.body;


  const query = 'SELECT * FROM usuarios WHERE nombre = ?';
  connection.query(query, [nombre], (err, results) => {
      if (err) {
          return res.send('Error al obtener el usuario');
      }


      if (results.length === 0) {
          return res.send('Usuario no encontrado');
      }


      const user = results[0];


      const isPasswordValid = bcrypt.compareSync(password, user.contrasena_hash);
      if (!isPasswordValid) {
          return res.send('Contraseña incorrecta');
      }


      // Almacenar la información del usuario en la sesión
      req.session.user = {
          id: user.id,
          nombre: user.nombre,
          tipo_usuario: user.tipo_usuario
      };


      res.redirect('/');
  });
});


app.post('/submit-data', requireLogin, requireRole('admin'), (req, res) => {
  const { name, descripcion, estado, usuario_id } = req.body;


  const query = 'INSERT INTO datos_biomedicos (nombre_dispositivo, descripcion, estado, usuario_id) VALUES (?, ?, ?, ?);';
  connection.query(query, [name, descripcion, estado, usuario_id ], (err, result) => {
    if (err) {
      return res.send('Error al guardar los datos en la base de datos.');
    }
    res.send(`Dispositivo ${name} guardado en la base de datos.`);
  });
});


// Ruta para obtener el tipo de usuario actual
app.get('/tipo-usuario', requireLogin, (req, res) => {
  res.json({ tipo_usuario: req.session.user.tipo_usuario });
});


// Ruta para que solo admin pueda ver todos los usuarios
app.get('/ver-usuarios', requireLogin, requireRole('admin'), (req, res) => {
  const query = 'SELECT * FROM usuarios';
  connection.query(query, (err, results) => {
      if (err) return res.send('Error al obtener usuarios');
      let html = `
      <!DOCTYPE html>
      <html lang="es">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <h1Usuarios</h1>
        <link rel="stylesheet" href="/styles.css">
     
        </head>
      <body>
       
        <table>
          <thead>
            <tr>
              <th>Nombre</th>
              <th>Contraseña</th>
              <th>Tipo de usuario (bpm)</th>
            </tr>
          </thead>
          <tbody>
    `;


    // Agrega las filas de la tabla dinámicamente
    results.forEach(usuarios => {
      html += `
        <tr>
          <td>${usuarios.nombre_usuario}</td>
          <td>${usuarios.password_hash}</td>
          <td>${usuarios.tipo_usuario}</td>
        </tr>
      `;
    });


    // Finaliza el HTML
    html += `
          </tbody>
        </table>
        <button onclick="window.location.href='/'">Volver</button>
      </body>
      </html>
    `;


    // Envía el HTML generado como respuesta
    res.send(html);


  });
});


// Ruta para cargar el formulario de edición de pacientes
app.get('/editar-dispositivos', requireLogin, requireRole('medico'), (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'editar-dispositivos.html'));
});


// Ruta para obtener un paciente por su ID (para el formulario de edición)
app.get('/obtener-dispositivos/:id', requireLogin, requireRole('medico'), (req, res) => {
  const { id } = req.params;
  const query = 'SELECT * FROM datos_biomedicos WHERE id = ?';
  connection.query(query, [id], (err, results) => {
    if (err) return res.status(500).send('Error al obtener el Dispositivo');
    if (results.length === 0) return res.status(404).send('Dispositivo no encontrado');
    res.json(results[0]);
  });
});


// Ruta para actualizar los datos de un paciente
app.post('/editar-dispositivos', requireLogin, requireRole('medico'), (req, res) => {
  const { name, descripcion, estado, usuario_id } = req.body;
  const query = 'UPDATE datos_biomedicos SET nombre_dispositivo = ?, descripcion = ?, estado = ?, usuario_id = ? WHERE id = ?';
  connection.query(query, [name, descripcion, estado, usuario_id], (err, result) => {
    if (err) return res.send('Error al actualizar los datos del paciente.');
    res.send(`Dispositivo ${name} actualizado correctamente.`);
  });
});


// Ruta para eliminar un paciente
app.delete('/eliminar-Dispositivos/:id', requireLogin, requireRole('medico'), (req, res) => {
  const { id } = req.params;  // Obtener el ID del paciente desde los parámetros de la URL
 
  // Realizar la consulta SQL para eliminar el paciente por su ID
  const query = 'DELETE FROM datos_biomedicos WHERE id = ?';
  connection.query(query, [id], (err, result) => {
    if (err) return res.status(500).send('Error al eliminar el dispositivos');
    if (result.affectedRows === 0) return res.status(404).send('Dispositivo no encontrado');
    res.send(`Dispositivo con ID ${id} eliminado exitosamente.`);
  });
});




// Cerrar sesión
app.get('/logout', (req, res) => {
  req.session.destroy();
  res.redirect('/login.html');
});


// Iniciar el servidor
app.listen(3000, () => {
  console.log('Servidor corriendo en http://localhost:3000');
});
